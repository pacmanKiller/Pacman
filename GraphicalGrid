import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.*;


public class GraphicalGrid extends JPanel implements MouseListener{
	BufferedImage image, littleTac, bigTac,pacman, superSpeed;
	JFrame pacFrame;
	boolean gridFilled;
	Grid grid;
	int x, y;
	static ArrayList<Ghost> ghosts = new ArrayList(); 
	static Pacman p;
	static boolean turnable = true;
	static int pacSpeedFactor = 1;
	static int ghostSpeedFactor = 1;
	static int pacDir = 3;
	static int ghostTurn = 1;
	static int pacTurn = 1;
	PacmanIntroMenu menu=null;

	private Timer mouthTimer=new Timer(100, new ActionListener(){
		public void actionPerformed(ActionEvent e){
			if(grid.isValid(p.nextLocation()[0], p.nextLocation()[1]) == 1){
				p.toggleMouth();
				for(int x = 0; x < ghosts.size(); x++){
					ghosts.get(x).setPicture();
				}
				p.setPicture();
				repaint();
			}
		}
	});
	private Timer skewTimer=new Timer(15, new ActionListener(){
		public void actionPerformed(ActionEvent e){
			if(grid.isValid(p.nextLocation()[0], p.nextLocation()[1]) == 1){
				if(grid.isValid(p.nextLocation()[0], p.nextLocation()[1]) == 1){
					if(p.getDirection()==1)
						p.setHorSkewConstant(p.getHorSkewConstant()+.7* pacSpeedFactor);
					else if(p.getDirection()==2)
						p.setVertSkewConstant(p.getVertSkewConstant()-.7* pacSpeedFactor);
					else if(p.getDirection()==3)
						p.setHorSkewConstant(p.getHorSkewConstant()-.7* pacSpeedFactor);
					else if(p.getDirection()==4)
						p.setVertSkewConstant(p.getVertSkewConstant()+.7*pacSpeedFactor);
				}
				repaint();
			}
			for(int x = 0; x < ghosts.size(); x++){
			if(ghosts.get(x).getHorSkewConstant() == 0 && ghosts.get(x).getVertSkewConstant() == 0)
				ghosts.get(x).dirChange();
			if(grid.isValid(ghosts.get(x).nextLocation()[0], ghosts.get(x).nextLocation()[1]) == 1){
					if(ghosts.get(x).getDirection()==1){
						ghosts.get(x).setHorSkewConstant(ghosts.get(x).getHorSkewConstant()+.7*ghostSpeedFactor);
					}else if(ghosts.get(x).getDirection()==2){
						ghosts.get(x).setVertSkewConstant(ghosts.get(x).getVertSkewConstant()-.7*ghostSpeedFactor);
					}else if(ghosts.get(x).getDirection()==3){
						ghosts.get(x).setHorSkewConstant(ghosts.get(x).getHorSkewConstant()-.7*ghostSpeedFactor);
					}else if(ghosts.get(x).getDirection()==4){
						ghosts.get(x).setVertSkewConstant(ghosts.get(x).getVertSkewConstant()+.7*ghostSpeedFactor);
					}
					repaint();
				}
			}
			repaint();
		}
	});
	GraphicalGrid(){
		mouthTimer.start();
		skewTimer.start();
		addMouseListener(this);
		grid=new Grid();
		p=new Pacman(15, 23, grid);
		ghosts.add(new Ghost(1, 1, grid, "Red", p));
		ghosts.add(new Ghost(26, 1, grid, "Pink", p));
		ghosts.add(new Ghost(1, 7, grid, "Teal", p));
		ghosts.add(new Ghost(26, 7, grid, "Yellow", p));
		ghosts.add(new BlindGhost(1, 4, grid, "Teal", p));
		ghosts.add(new BlindGhost(26, 4, grid, "Yellow", p));
		try {
			image = ImageIO.read(new File("Classic-PacmanBoard.png"));
			littleTac = ImageIO.read(new File("LittleTac.png"));
			bigTac=ImageIO.read(new File("BigTac.png"));
			pacman = ImageIO.read(new File("LeftPacmanMouthOpen.png"));
			superSpeed = ImageIO.read(new File("superSpeed.png"));
		} catch (IOException e1) {
		}
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0), "face up");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0), "face down");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0), "face left");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0), "face right");
		this.getActionMap().put("face up", new MoveAction(2, p));
		this.getActionMap().put("face down", new MoveAction(4, p));
		this.getActionMap().put("face left", new MoveAction(3, p));
		this.getActionMap().put("face right", new MoveAction(1, p));
	}
	public ArrayList<Ghost> getGhosts(){
		return ghosts;
	}
	public Pacman getPacman(){
		return p;
	}
	public void setIntroMenu(PacmanIntroMenu newMenu){
		menu=newMenu;
	}
	private class MoveAction extends AbstractAction{
		int direction;
		Pacman player;
		MoveAction(int direction, Pacman player){
			this.direction=direction;
			this.player=player;
		}
		public void actionPerformed(ActionEvent e) {
			if(direction==1){
				if(grid.isValid(player.nextLocation()[0]+1, player.nextLocation()[1]) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0]+1, player.getPositions()[1]) != 0)){
					pacDir = direction;
				}
			}else if(direction==2){
				if(grid.isValid(player.nextLocation()[0], player.nextLocation()[1]-1) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0], player.getPositions()[1]-1) != 0)){
					pacDir = direction;
				}	
			}else if(direction==3){
				if(grid.isValid(player.nextLocation()[0]-1, player.nextLocation()[1]) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0]-1, player.getPositions()[1]) != 0)){
					pacDir = direction;
				}	
			}else if(direction==4){
				if(grid.isValid(player.nextLocation()[0], player.nextLocation()[1]+1) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0], player.getPositions()[1]+1) != 0)){
					pacDir = direction;
				}	
			}else{}

		}
	}
	public void fillGraphicalGrid(Graphics g){
		for(int i=1; i<=26; i++){
			for(int j=1; j<=29; j++){
				if(grid.getTackStatus(i, j)==1){
					g.drawImage(littleTac, (int)(i*19.7)+74, (int)(j*19.4)+10, this);
				}else if(grid.getTackStatus(i, j)==2){
					g.drawImage(bigTac, (int)(i*19.7)+70, (int)(j*19.4)+8, this);
				}else{}
			}
		}
	}
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		g.drawImage(image, 0, 0, this);
		g.drawImage(superSpeed, 20, 10, this);
		fillGraphicalGrid(g);
		g.drawImage(p.getPicture(), (int)((int)((p.getPositions()[0]*19.4)+68)+p.getHorSkewConstant()),(int)((int)((p.getPositions()[1]*19.4)+2)+p.getVertSkewConstant()), this);
		for(int x = 0; x < ghosts.size(); x++)
			g.drawImage(ghosts.get(x).getPicture(), (int)((int)(((ghosts.get(x).getPositions()[0]*19.4)+68)+(ghosts.get(x).getHorSkewConstant()))),(int)((int)(((ghosts.get(x).getPositions()[1]*19.4)+2)+(ghosts.get(x).getVertSkewConstant()))), this);
		g.setColor(Color.white);
		g.drawString("Points: "+grid.getScore(), 20, 620);
		g.drawString("5000 Points", 5, 50);
	}
	public boolean tacIteration(){
		boolean ret = true;
		for(int i=1; i<=26; i++){
			for(int j=1; j<=29; j++){
				if(grid.getTackStatus(i, j)!=0){
					return false;
				}
			}
		}
		return ret;
	}
	public int getPacSpeedFactor(){
		return pacSpeedFactor;
	}
	public void setPacSpeedFactor(int newFactor){
		pacSpeedFactor= newFactor;
	}
	public int getGhostSpeedFactor(){
		return ghostSpeedFactor;
	}
	public void setGhostSpeedFactor(int newFactor){
		ghostSpeedFactor= newFactor;
	}
	public Grid getGrid(){
		return grid;
	}
	public void play(PacmanIntroMenu pim){
		if(pacTurn == ghostSpeedFactor){
			p.move();
			p.setDirection(pacDir);
			pacTurn = 1;
		}
		else
			pacTurn++;
		repaint();
		if(ghostTurn == pacSpeedFactor){
			for(int x = 0; x < ghosts.size(); x++){
				ghosts.get(x).move();
			}
			ghostTurn = 1;
		}
		else
			ghostTurn++;
		for(int x = 0; x < ghosts.size(); x++){
			if(ghosts.get(x).colliding(p))
				pim.KILL();
		}
		if(grid.checkEmpty())
			pim.KILL();
		repaint();
	}
	public void mouseClicked(MouseEvent arg0) {}
	public void mouseEntered(MouseEvent arg0) {}
	public void mouseExited(MouseEvent arg0) {}
	public void mousePressed(MouseEvent e) {
		x=e.getX();
		y=e.getY();
		if((x>=20 && x<=45) && (y>=10 && y<=33)){
			if(grid.getScore()>=5000){
				grid.setScore(grid.getScore()-5000);
				pacSpeedFactor+=1;
				menu.setPacSpeedFactor(menu.getPacSpeedFactor()+1);		
			}
		}
	}
	public void mouseReleased(MouseEvent arg0) {}
}
