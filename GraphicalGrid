import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;


public class GraphicalGrid extends JPanel implements MouseListener{
	BufferedImage image, littleTac, bigTac,pacman, superSpeed;
	JFrame pacFrame;
	boolean gridFilled;
	Grid grid;
	int x, y;
	static Pacman p;
	static Ghost redGhost;
	static Ghost pinkGhost;
	static Ghost tealGhost;
	static Ghost yellowGhost;
	static Ghost redGhost1;
	static Ghost pinkGhost1;
	static Ghost tealGhost1;
	static Ghost yellowGhost1;
	static Ghost blindGhost;
	static boolean turnable = true;
	static int pacDir = 3;

	private Timer mouthTimer=new Timer(100, new ActionListener(){
		public void actionPerformed(ActionEvent e){
			if(grid.isValid(p.nextLocation()[0], p.nextLocation()[1]) == 1){
				p.toggleMouth();
				redGhost.setPicture();
				pinkGhost.setPicture();
				tealGhost.setPicture();
				yellowGhost.setPicture();
				blindGhost.setPicture();
				p.setPicture();
				repaint();
			}
		}
	});
	private Timer skewTimer=new Timer(15, new ActionListener(){
		public void actionPerformed(ActionEvent e){
			if(grid.isValid(p.nextLocation()[0], p.nextLocation()[1]) == 1){
				if(p.getDirection()==1){
					p.setHorSkewConstant(p.getHorSkewConstant()+.7);
					if(p.getHorSkewConstant() >= 4.8){
						turnable = false;
					}
				}else if(p.getDirection()==2){
					p.setVertSkewConstant(p.getVertSkewConstant()-.7);
					if(p.getVertSkewConstant() <= -4.8){
						turnable = false;
					}
				}else if(p.getDirection()==3){
					p.setHorSkewConstant(p.getHorSkewConstant()-.7);
					if(p.getHorSkewConstant() <= -4.8){
						turnable = false;
					}
				}else if(p.getDirection()==4){
					p.setVertSkewConstant(p.getVertSkewConstant()+.7);
					if(p.getVertSkewConstant() >= 4.8){
						turnable = false;
					}
				}
				repaint();
			}
			if(redGhost.getHorSkewConstant() == 0 && redGhost.getVertSkewConstant() == 0)
				redGhost.dirChange();
			if(grid.isValid(redGhost.nextLocation()[0], redGhost.nextLocation()[1]) == 1){
				if(redGhost.getDirection()==1){
					redGhost.setHorSkewConstant(redGhost.getHorSkewConstant()+.7);
				}else if(redGhost.getDirection()==2){
					redGhost.setVertSkewConstant(redGhost.getVertSkewConstant()-.7);
				}else if(redGhost.getDirection()==3){
					redGhost.setHorSkewConstant(redGhost.getHorSkewConstant()-.7);
				}else if(redGhost.getDirection()==4){
					redGhost.setVertSkewConstant(redGhost.getVertSkewConstant()+.7);
				}
				repaint();
			}
			if(pinkGhost.getHorSkewConstant() == 0 && pinkGhost.getVertSkewConstant() == 0)
				pinkGhost.dirChange();
			if(grid.isValid(pinkGhost.nextLocation()[0], pinkGhost.nextLocation()[1]) == 1){
				if(pinkGhost.getDirection()==1){
					pinkGhost.setHorSkewConstant(pinkGhost.getHorSkewConstant()+.7);
				}else if(pinkGhost.getDirection()==2){
					pinkGhost.setVertSkewConstant(pinkGhost.getVertSkewConstant()-.7);
				}else if(pinkGhost.getDirection()==3){
					pinkGhost.setHorSkewConstant(pinkGhost.getHorSkewConstant()-.7);
				}else if(pinkGhost.getDirection()==4){
					pinkGhost.setVertSkewConstant(pinkGhost.getVertSkewConstant()+.7);
				}
				repaint();
			}
			if(tealGhost.getHorSkewConstant() == 0 && tealGhost.getVertSkewConstant() == 0)
				tealGhost.dirChange();
			if(grid.isValid(tealGhost.nextLocation()[0], tealGhost.nextLocation()[1]) == 1){
				if(tealGhost.getDirection()==1){
					tealGhost.setHorSkewConstant(tealGhost.getHorSkewConstant()+.7);
				}else if(tealGhost.getDirection()==2){
					tealGhost.setVertSkewConstant(tealGhost.getVertSkewConstant()-.7);
				}else if(tealGhost.getDirection()==3){
					tealGhost.setHorSkewConstant(tealGhost.getHorSkewConstant()-.7);
				}else if(tealGhost.getDirection()==4){
					tealGhost.setVertSkewConstant(tealGhost.getVertSkewConstant()+.7);
				}
				repaint();
			}
			if(yellowGhost.getHorSkewConstant() == 0 && yellowGhost.getVertSkewConstant() == 0)
				yellowGhost.dirChange();
			if(grid.isValid(yellowGhost.nextLocation()[0], yellowGhost.nextLocation()[1]) == 1){
				if(yellowGhost.getDirection()==1){
					yellowGhost.setHorSkewConstant(yellowGhost.getHorSkewConstant()+.7);
				}else if(yellowGhost.getDirection()==2){
					yellowGhost.setVertSkewConstant(yellowGhost.getVertSkewConstant()-.7);
				}else if(yellowGhost.getDirection()==3){
					yellowGhost.setHorSkewConstant(yellowGhost.getHorSkewConstant()-.7);
				}else if(yellowGhost.getDirection()==4){
					yellowGhost.setVertSkewConstant(yellowGhost.getVertSkewConstant()+.7);
				}
				repaint();
			}
			if(blindGhost.getHorSkewConstant() == 0 && blindGhost.getVertSkewConstant() == 0)
				blindGhost.dirChange();
			if(grid.isValid(blindGhost.nextLocation()[0], blindGhost.nextLocation()[1]) == 1){
				if(blindGhost.getDirection()==1){
					blindGhost.setHorSkewConstant(blindGhost.getHorSkewConstant()+.7);
				}else if(blindGhost.getDirection()==2){
					blindGhost.setVertSkewConstant(blindGhost.getVertSkewConstant()-.7);
				}else if(blindGhost.getDirection()==3){
					blindGhost.setHorSkewConstant(blindGhost.getHorSkewConstant()-.7);
				}else if(blindGhost.getDirection()==4){
					blindGhost.setVertSkewConstant(blindGhost.getVertSkewConstant()+.7);
				}
				repaint();
			}
			repaint();
		}
	});
	GraphicalGrid(){
		mouthTimer.start();
		skewTimer.start();
		grid=new Grid();
		p=new Pacman(15, 23, grid);
		redGhost=new Ghost(1, 1, grid, "Red", p);
		pinkGhost=new Ghost(1, 2, grid, "Pink", p);
		tealGhost=new Ghost(1, 3, grid, "Teal", p);
		yellowGhost=new Ghost(1, 4, grid, "Yellow", p);
		blindGhost=new Ghost(1, 5, grid, "RedBlind", p);
		try {
			image = ImageIO.read(new File("Classic-PacmanBoard.png"));
			littleTac = ImageIO.read(new File("LittleTac.png"));
			bigTac=ImageIO.read(new File("BigTac.png"));
			pacman = ImageIO.read(new File("LeftPacmanMouthOpen.png"));
			superSpeed = ImageIO.read(new File("superSpeed.png"));
		} catch (IOException e1) {
		}
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0), "face up");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0), "face down");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0), "face left");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0), "face right");
		this.getActionMap().put("face up", new MoveAction(2, p));
		this.getActionMap().put("face down", new MoveAction(4, p));
		this.getActionMap().put("face left", new MoveAction(3, p));
		this.getActionMap().put("face right", new MoveAction(1, p));
	}
	public Pacman getPacman(){
		return p;
	}
	private class MoveAction extends AbstractAction{
		int direction;
		Pacman player;
		MoveAction(int direction, Pacman player){
			this.direction=direction;
			this.player=player;
		}
		public void actionPerformed(ActionEvent e) {
			if(direction==1){
				if(grid.isValid(player.nextLocation()[0]+1, player.nextLocation()[1]) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0]+1, player.getPositions()[1]) != 0)){
					pacDir = direction;
				}
			}else if(direction==2){
				if(grid.isValid(player.nextLocation()[0], player.nextLocation()[1]-1) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0], player.getPositions()[1]-1) != 0)){
					pacDir = direction;
				}	
			}else if(direction==3){
				if(grid.isValid(player.nextLocation()[0]-1, player.nextLocation()[1]) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0]-1, player.getPositions()[1]) != 0)){
					pacDir = direction;
				}	
			}else if(direction==4){
				if(grid.isValid(player.nextLocation()[0], player.nextLocation()[1]+1) != 0 || (grid.isValid(player.nextLocation()[0], player.nextLocation()[1]) == 0 && grid.isValid(player.getPositions()[0], player.getPositions()[1]+1) != 0)){
					pacDir = direction;
				}	
			}else{}

		}
	}
	public void fillGraphicalGrid(Graphics g){
		for(int i=1; i<=26; i++){
			for(int j=1; j<=29; j++){
				if(grid.getTackStatus(i, j)==1){
					g.drawImage(littleTac, (int)(i*19.7)+74, (int)(j*19.4)+10, this);
				}else if(grid.getTackStatus(i, j)==2){
					g.drawImage(bigTac, (int)(i*19.7)+70, (int)(j*19.4)+8, this);
				}else{}
			}
		}
	}
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		g.drawImage(image, 0, 0, this);
		g.drawImage(superSpeed, 20, 10, this);
		fillGraphicalGrid(g);
		g.drawImage(p.getPicture(), (int)((int)((p.getPositions()[0]*19.4)+68)+p.getHorSkewConstant()),(int)((int)((p.getPositions()[1]*19.4)+2)+p.getVertSkewConstant()), this);
		g.drawImage(redGhost.getPicture(), (int)((int)((redGhost.getPositions()[0]*19.4)+68)+redGhost.getHorSkewConstant()),(int)((int)((redGhost.getPositions()[1]*19.4)+2)+redGhost.getVertSkewConstant()), this);
		g.drawImage(pinkGhost.getPicture(), (int)((int)((pinkGhost.getPositions()[0]*19.4)+68)+pinkGhost.getHorSkewConstant()),(int)((int)((pinkGhost.getPositions()[1]*19.4)+2)+pinkGhost.getVertSkewConstant()), this);
		g.drawImage(tealGhost.getPicture(), (int)((int)((tealGhost.getPositions()[0]*19.4)+68)+tealGhost.getHorSkewConstant()),(int)((int)((tealGhost.getPositions()[1]*19.4)+2)+tealGhost.getVertSkewConstant()), this);
		g.drawImage(yellowGhost.getPicture(), (int)((int)((yellowGhost.getPositions()[0]*19.4)+68)+yellowGhost.getHorSkewConstant()),(int)((int)((yellowGhost.getPositions()[1]*19.4)+2)+yellowGhost.getVertSkewConstant()), this);
		g.drawImage(blindGhost.getPicture(), (int)((int)((blindGhost.getPositions()[0]*19.4)+68)+blindGhost.getHorSkewConstant()),(int)((int)((blindGhost.getPositions()[1]*19.4)+2)+blindGhost.getVertSkewConstant()), this);
		g.setColor(Color.white);
		g.drawString("Score: "+grid.getScore(), 20, 620);
		g.drawString("400 Points", 5, 50);
	}
	public boolean tacIteration(){
		boolean ret = true;
		for(int i=1; i<=26; i++){
			for(int j=1; j<=29; j++){
				if(grid.getTackStatus(i, j)!=0){
					return false;
				}
			}
		}
		return ret;
	}

	public void play(PacmanIntroMenu pim){
		p.move();
		p.setDirection(pacDir);
		repaint();
		redGhost.move();
		pinkGhost.move();
		tealGhost.move();
		yellowGhost.move();
		blindGhost.move();
		if(redGhost.colliding(p))
			pim.KILL();
		if(pinkGhost.colliding(p))
			pim.KILL();
		if(tealGhost.colliding(p))
			pim.KILL();
		if(yellowGhost.colliding(p))
			pim.KILL();
		if(blindGhost.colliding(p))
			pim.KILL();
		
		repaint();
	}
	public void mouseClicked(MouseEvent arg0) {}
	public void mouseEntered(MouseEvent arg0) {}
	public void mouseExited(MouseEvent arg0) {}
	public void mousePressed(MouseEvent arg0) {}
	public void mouseReleased(MouseEvent arg0) {}
}
