import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.Action;


public class Pacman extends Character{
	public boolean superPower = false;
	public final int RIGHT = 1;
	public final int UP = 2;
	public final int LEFT = 3;
	public final int DOWN = 4;
	String picDirection = "";
	public Pacman(int xStart, int yStart, Grid g){
		super(xStart, yStart, g, "pacman");
	}
	public void move(){
		int currentDirection=getDirection();
		System.out.println(getGrid().isValid(nextLocation()[0], nextLocation()[1]) + " " + nextLocation()[0] + " " + nextLocation()[1]);
		if(getGrid().isValid(nextLocation()[0], nextLocation()[1]) == 1){
			superPower = getGrid().eat(nextLocation()[0], nextLocation()[1]);
			setXLoc(nextLocation()[0]);
			setYLoc(nextLocation()[1]);
			setPicture();
			setHorSkewConstant(0);
			setVertSkewConstant(0);
		if(getGrid().isValid(nextLocation()[0], nextLocation()[1]) == 2){
			setYLoc(nextLocation()[1]);
			if(nextLocation()[0] == 1)
				setXLoc(26);
			else
				setXLoc(1);
		}
		}else{
			//			direction = (int)(Math.random()*4+1);
			while(currentDirection==getDirection()){
//				doNothing();
			}
			setPicture();
			//			System.out.println(nextLocation()[0] + " " + nextLocation()[1] + " " + direction);
			move();
		}
		//System.out.println(xLoc + " " + yLoc);
		//grid.printGrid();
	}
	public void setPicture(){
		String picMouth;
		if(getImageShift())
			picMouth = "MouthOpen.png";
		else
			picMouth = "MouthClosed.png";
		switch(getDirection()){
		case DOWN: picDirection = "DownPacman"; break;
		case UP: picDirection = "UpPacman"; break;
		case LEFT: picDirection = "LeftPacman"; break;
		case RIGHT: picDirection = "RightPacman"; break;
		}
		try {
			passPicture(ImageIO.read(new File(picDirection + picMouth)));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void main(String[] args){
		Grid g = new Grid();
		Pacman p = new Pacman(13, 17, g);
		for(int x = 0; x < 1000; x++){
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			p.move();
		}
	}
}
