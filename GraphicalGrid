import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;


public class GraphicalGrid extends JPanel{
	BufferedImage image, littleTac, bigTac,pacman;
	JFrame pacFrame;
	boolean gridFilled;
	Grid grid;
	static Pacman p;
	static Ghost ghost;

	private Timer mouthTimer=new Timer(100, new ActionListener(){
		public void actionPerformed(ActionEvent e){
			if(grid.isValid(p.nextLocation()[0], p.nextLocation()[1]) == 1){
				p.toggleMouth();
				ghost.setPicture();
				p.setPicture();
				repaint();
			}
		}
	});
	private Timer skewTimer=new Timer(15, new ActionListener(){
		public void actionPerformed(ActionEvent e){
			if(grid.isValid(p.nextLocation()[0], p.nextLocation()[1]) == 1){
				if(p.getDirection()==1){
					p.setHorSkewConstant(p.getHorSkewConstant()+.6);
				}else if(p.getDirection()==2){
					p.setVertSkewConstant(p.getVertSkewConstant()-.6);
				}else if(p.getDirection()==3){
					p.setHorSkewConstant(p.getHorSkewConstant()-.6);
				}else if(p.getDirection()==4){
					p.setVertSkewConstant(p.getVertSkewConstant()+.6);
				}
				repaint();
			}
		}
	});
	GraphicalGrid(){
		mouthTimer.start();
		skewTimer.start();
		grid=new Grid();
		p=new Pacman(15, 23, grid);
		ghost=new Ghost(1, 1, grid, "Mwahaha");
		try {
			image = ImageIO.read(new File("Classic-PacmanBoard.png"));
			littleTac = ImageIO.read(new File("LittleTac.png"));
			bigTac=ImageIO.read(new File("BigTac.png"));
			pacman = ImageIO.read(new File("LeftPacmanMouthOpen.png"));
		} catch (IOException e1) {
		}
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0), "face up");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0), "face down");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0), "face left");
		this.getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0), "face right");
		this.getActionMap().put("face up", new MoveAction(2, p));
		this.getActionMap().put("face down", new MoveAction(4, p));
		this.getActionMap().put("face left", new MoveAction(3, p));
		this.getActionMap().put("face right", new MoveAction(1, p));
		pacFrame=new JFrame();
		pacFrame.setContentPane(this);
		pacFrame.setTitle("Pacman");
		pacFrame.setSize(650, 657);
		pacFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		pacFrame.setResizable(false);
		pacFrame.setVisible(true);
	}

	public Pacman getPacman(){
		return p;
	}
	private class MoveAction extends AbstractAction{
		int direction;
		Pacman player;
		MoveAction(int direction, Pacman player){
			this.direction=direction;
			this.player=player;
		}
		public void actionPerformed(ActionEvent e) {
			if(direction==1){
				if(grid.isValid(player.getPositions()[0]+1, player.getPositions()[1]) == 1){
					player.setDirection(direction);
				}
			}else if(direction==2){
				if(grid.isValid(player.getPositions()[0], player.getPositions()[1]-1) == 1){
					player.setDirection(direction);
				}	
			}else if(direction==3){
				if(grid.isValid(player.getPositions()[0]-1, player.getPositions()[1]) == 1){
					player.setDirection(direction);
				}	
			}else if(direction==4){
				if(grid.isValid(player.getPositions()[0], player.getPositions()[1]+1) == 1){
					player.setDirection(direction);
				}	
			}else{}

		}
	}
	public void fillGraphicalGrid(Graphics g){
		for(int i=1; i<=26; i++){
			for(int j=1; j<=29; j++){
				if(grid.getTackStatus(i, j)==1){
					g.drawImage(littleTac, (int)(i*19.7)+74, (int)(j*19.4)+10, this);
				}else if(grid.getTackStatus(i, j)==2){
					g.drawImage(bigTac, (int)(i*19.7)+70, (int)(j*19.4)+8, this);
				}else{}
			}
		}
	}
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		g.drawImage(image, 0, 0, this);
		fillGraphicalGrid(g);
		g.drawImage(p.getPicture(), (int)((int)((p.getPositions()[0]*19.4)+68)+p.getHorSkewConstant()),(int)((int)((p.getPositions()[1]*19.4)+2)+p.getVertSkewConstant()), this);
		g.drawImage(ghost.getPicture(), (int)((int)((ghost.getPositions()[0]*19.4)+68)+ghost.getHorSkewConstant()),(int)((int)((ghost.getPositions()[1]*19.4)+2)+ghost.getVertSkewConstant()), this);
		g.setColor(Color.white);
		g.drawString("Score: "+grid.getScore(), 20, 620);
		

	}
	

	public static void main(String[] args) {
		GraphicalGrid g=new GraphicalGrid();
		for(int x = 0; x < 1000; x++){

			try {
				p.move();
				ghost.move();
				Thread.sleep(500);
				
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			g.repaint();
		}
	}
}
