public class Grid {
	private boolean[][] validSpaces;
	private int[][] ticTacs;
	final int xSize = 26;
	final int ySize = 29;
	int score;
	public Grid(){
		validSpaces = new boolean[xSize][ySize];
		ticTacs = new int[xSize][ySize];
		for(int x = 0; x < xSize; x++){
			for(int y = 0; y < ySize; y++){
				validSpaces[x][y] = false;
				ticTacs[x][y] = 0;
			}
		}
		fillGrids();
	}
	public int getScore(){
		return score;
	}
	public void setScore(int newScore){
		score=newScore;
	}
	private void fillGrids(){
		fillHorizontal(1,1,12,true);
		fillHorizontal(15,1,12,true);
		fillVertical(1,1,8,true);
		fillVertical(1,6,26,true);
		fillVertical(1,12,5,true);
		fillVertical(1,15,5,true);
		fillVertical(1,21,26,true);
		fillVertical(1,26,8,true);
		fillHorizontal(1,5,26,true);
		fillVertical(5,9,4,true);
		fillVertical(5,18,4,true);
		fillHorizontal(1,8,6, true);
		fillHorizontal(9,8,4,true);
		fillHorizontal(15,8,4,true);
		fillHorizontal(21,8,6,true);
		fillVertical(9,15,3,false);
		fillVertical(9,12,3,false);
		fillHorizontal(9,11,10,false);
		fillVertical(11,9,9,false);
		fillVertical(11,18,9,false);
		fillHorizontal(1,14,9,false);
		fillHorizontal(18,14,9,false);
		fillHorizontal(9,17,10,false);
		fillHorizontal(1,20,12,true);
		fillHorizontal(15,20,12,true);
		fillVertical(20,1,4,true);
		fillVertical(20,12,4,true);
		fillVertical(20,15,4,true);
		fillVertical(20,26,4,true);
		fillHorizontal(1,23,3,true);
		fillHorizontal(6,23,16,true);
		fillHorizontal(24,23,3,true);
		fillVertical(23,3,4,true);
		fillVertical(23,9,4,true);
		fillVertical(23,18,4,true);
		fillVertical(23,24,4,true);
		fillHorizontal(1,26,6,true);
		fillHorizontal(9,26,4,true);
		fillHorizontal(15,26,4,true);
		fillHorizontal(21,26,6,true);
		fillVertical(26,1,4,true);
		fillVertical(26,12,4,true);
		fillVertical(26,15,4,true);
		fillVertical(26,26,4,true);
		fillHorizontal(1,29,26,true);
		//fillHorizontal(1,14,6, false);
		//fillHorizontal(20,14,6, false);
		ticTacs[0][2] = 2;
		ticTacs[25][2] = 2;
		ticTacs[0][21] = 2;
		ticTacs[25][21] = 2;
	}
	public boolean checkEmpty(){
		for(int x = 0; x < xSize; x++){
			for(int y = 0; y < ySize; y++){
				if(ticTacs[x][y] != 0)
					return false;
			}
		}
		return true;
	}
	private void fillVertical(int yStart, int x, int length, boolean tac){
		for(int y =0 ; y < length; y++){
			validSpaces[x-1][yStart-1 + y] = true;
			if(tac)
				ticTacs[x-1][yStart-1 + y] = 1;
		}
	}
	private void fillHorizontal(int xStart, int y, int length, boolean tac){
		for(int x =0 ; x < length; x++){
			validSpaces[xStart-1 + x][y-1] = true;
			if(tac)
				ticTacs[xStart-1 + x][y-1] = 1;
		}
	}
	public int isValid(int x, int y){
		if(y == 14 && (x == 1 || x == 26))
			return 2;
		if(x <= xSize && y <= ySize && x > 0 && y > 0 && validSpaces[x-1][y-1])
			return 1;
		return 0;
		
	}
	public int getTackStatus(int x, int y){
		return ticTacs[x-1][y-1];
	}
	public boolean eat(int x, int y){
		boolean ret = (ticTacs[x-1][y-1] == 2);
		if(ticTacs[x-1][y-1] == 2){
			score+=500;
		}else if(ticTacs[x-1][y-1] == 1){
			score+=100;
		}
		ticTacs[x-1][y-1] = 0;
		return ret;
	}
	public void printGrid(){
		for(int y = 0; y < ySize; y++){
			for(int x = 0; x < xSize; x++){
				if(validSpaces[x][y]){
					switch(ticTacs[x][y]){
					case 0: System.out.print("N "); break;
					case 1: System.out.print("L "); break;
					case 2: System.out.print("B "); break;
					}
				}else{
					System.out.print("  ");
				}	
			}
			System.out.print("\n");
		}
	}
	public static void main(String[] args){
		Grid g = new Grid();
		g.printGrid();
	}
}
